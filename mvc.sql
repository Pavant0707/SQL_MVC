CREATE DATABASE EMPLOYEEMVC
USE EMPLOYEEMVC

drop database EMPLOYEEMVC

CREATE TABLE EMPLOYEE(
EMPLOYEEID INT PRIMARY KEY IDENTITY(1,1),
EMPLOYEENAME VARCHAR(100) NOT NULL,
PROFILEIMAGE VARCHAR(MAX) NOT NULL,
GENDER VARCHAR(10) NOT NULL,
DEPARTMENT VARCHAR(100) NOT NULL,
SALARY MONEY NOT NULL,
STARTDATE DATE NOT NULL,
NOTES VARCHAR(MAX) NOT NULL);

INSERT INTO EMPLOYEE(EMPLOYEENAME,PROFILEIMAGE,GENDER,DEPARTMENT,SALARY,STARTDATE,NOTES) VALUES('RAM','RAM.JPG','MALE','IT',300000,'02-12-2024','HI RAM');

CREATE OR ALTER PROCEDURE REGISTEREMPLOYEE(
@EMPLOYEENAME VARCHAR(100),
@PROFILEIMAGE VARCHAR(MAX),
@GENDER VARCHAR(10),
@DEPARTMENT VARCHAR(100),
@SALARY MONEY,
@STARTDATE DATE,
@NOTES VARCHAR(MAX))
AS
BEGIN

IF @EMPLOYEENAME IS NULL OR
@PROFILEIMAGE IS NULL OR
@GENDER IS NULL OR
@DEPARTMENT IS NULL OR
@SALARY IS NULL OR
@STARTDATE IS NULL OR
@NOTES IS NULL

BEGIN
PRINT 'PROVIDE ALL PARMETERS'
RETURN 
END

IF @SALARY<=0
BEGIN
PRINT 'MUST BE GREATER THAN ZERO'
RETURN
END

IF @STARTDATE>GETDATE()
BEGIN
PRINT 'SHOULD NOT BE IN FUTURE'
RETURN
END

INSERT INTO EMPLOYEE(EMPLOYEENAME,PROFILEIMAGE,GENDER,DEPARTMENT,SALARY,STARTDATE,NOTES)
VALUES(@EMPLOYEENAME,@PROFILEIMAGE,@GENDER,@DEPARTMENT,@SALARY,@STARTDATE,@NOTES);

IF @@ROWCOUNT=1
BEGIN
PRINT 'ROW REGISTERED';
END

ELSE

BEGIN
PRINT'FAILED';
END
END
EXEC REGISTEREMPLOYEE 'ANUSHKA','IMG.JPA','FEMALE','ACTOR',2000,'02-02-2024','HI';

CREATE OR ALTER PROCEDURE GETALLEMPLOYEE
AS
BEGIN
SELECT * FROM EMPLOYEE;
END
EXEC GETALLEMPLOYEE

CREATE OR ALTER PROCEDURE Employee_List_SP
AS
BEGIN
    BEGIN TRY
        IF EXISTS (SELECT 1 FROM EMPLOYEE)
        BEGIN
            SELECT * FROM EMPLOYEE;
        END
        ELSE
        BEGIN
            PRINT 'NO EMPLOYEE FOUND'
        END
    END TRY
    BEGIN CATCH
        -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END


CREATE OR ALTER PROCEDURE UPDATEEMPLOYEE(
@EmpId INT ,
@EmpName VARCHAR(40),
@ProfileImage VARCHAR(60),
@Gender VARCHAR(10),
@Department VARCHAR(40),
@Salary MONEY,
@StartDate date,
@Notes VARCHAR(MAX))
AS
BEGIN
  BEGIN TRY
    BEGIN TRANSACTION

	IF @SALARY<=0
BEGIN
PRINT 'MUST BE GREATER THAN ZERO'
RETURN
END

IF @STARTDATE>GETDATE()
BEGIN
PRINT 'SHOULD NOT BE IN FUTURE'
RETURN
END


UPDATE   EMPLOYEE SET EMPLOYEENAME=@EmpName, 
                      PROFILEIMAGE=@ProfileImage,
					  GENDER=@Gender, 
					  DEPARTMENT=@Department,
					  SALARY=@Salary,
					  STARTDATE=@StartDate,
					  NOTES=@Notes
WHERE EMPLOYEEID=@EmpId;

COMMIT TRANSACTION

PRINT 'Employee Information Updated Successfully';

END TRY

BEGIN CATCH


IF @@TRANCOUNT>0
 ROLLBACK TRANSACTION;

 DECLARE @ErrorMessage NVARCHAR(4000);
 DECLARE @ErrorSeverity INT;
 DECLARE @ErrorState INT;

 SELECT 
 @ErrorMessage=ERROR_MESSAGE(),
 @ErrorSeverity=ERROR_SEVERITY(),
 @ErrorState=ERROR_STATE();

-- INSERT INTO ErrorLog(ErrorMessage,ErrorSeverity,ErrorState,ErrorDate)
-- Values(@ErrorMessage,@ErrorSeverity,@ErrorState,GETDATE());

 PRINT 'Error Occured: '+@ErrorMessage;
 
 END CATCH;
END;


EXEC UPDATEEMPLOYEE @EmpId=2, 
                    @EmpName='Cherry', 
                    @ProfileImage='cherry.jpg',
					@Gender='Male',
					@Department='HR',
					@Salary=4000,
					@StartDate='01-02-2024',
					@Notes='HII '

select *
from EMPLOYEE

CREATE OR ALTER PROCEDURE GET_BY_id
@EMPLOYEEID INT
AS
BEGIN
BEGIN TRY
        IF EXISTS (SELECT 1 FROM EMPLOYEE WHERE  EMPLOYEEID=@EMPLOYEEID)
        BEGIN
            SELECT * FROM EMPLOYEE WHERE EMPLOYEEID=@EMPLOYEEID;
        END
        ELSE
        BEGIN
            PRINT ' EMPLOYEE NOT FOUND'
        END
    END TRY
    BEGIN CATCH
        -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END


exec GET_BY_id 1;

CREATE OR ALTER PROCEDURE DELETEEMPLOYE(
@EmpId INT)
AS
BEGIN
  BEGIN TRY
    BEGIN TRANSACTION
	 

DELETE FROM EMPLOYEE WHERE EMPLOYEEID=@EmpId;
COMMIT TRANSACTION

PRINT 'EMPLOYEE  RECORD DELETED SUCCESSFULLY';
END TRY

BEGIN CATCH
IF @@TRANCOUNT>0
 ROLLBACK TRANSACTION;

 DECLARE @ErrorMessage NVARCHAR(4000);
 DECLARE @ErrorSeverity INT;
 DECLARE @ErrorState INT;

 SELECT 
 @ErrorMessage=ERROR_MESSAGE(),
 @ErrorSeverity=ERROR_SEVERITY(),
 @ErrorState=ERROR_STATE();



 PRINT 'Error Occured: '+@ErrorMessage;
 
 END CATCH;
 END

 CREATE OR ALTER PROCEDURE GET_EMPLOYEE_BY_NAME(
 @EMPLOYEENAME VARCHAR(100))
 AS
 BEGIN
   BEGIN TRY
   IF EXISTS (SELECT 1 FROM EMPLOYEE WHERE EMPLOYEENAME= @EMPLOYEENAME)
        BEGIN
            SELECT * FROM EMPLOYEE WHERE EMPLOYEENAME= @EMPLOYEENAME;
        END
   ELSE
        BEGIN
            PRINT ' EMPLOYEE NOT FOUND'
        END
    END TRY
    BEGIN CATCH
        -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END

EXEC GET_EMPLOYEE_BY_NAME 'RAM';

CREATE OR ALTER PROCEDURE LOGIN_ps
@EmpId INT,
@EmpName VARCHAR(100)
AS
BEGIN
BEGIN TRY
IF EXISTS(SELECT * FROM EMPLOYEE WHERE EMPLOYEEID=@EmpId AND EMPLOYEENAME=@EmpName)
BEGIN
SELECT * FROM EMPLOYEE WHERE EMPLOYEEID=@EmpId AND EMPLOYEENAME=@EmpName;
END
ELSE
 BEGIN 
 PRINT 'LOGIN FAILED'
 END
 END TRY
  BEGIN CATCH
    -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END

exec LOGIN_ps 1,'RAM';

CREATE OR ALTER PROCEDURE GET_NAME
@EMPLOYEENAME VARCHAR(100)
AS
BEGIN
BEGIN TRY 
IF EXISTS (SELECT 1 FROM EMPLOYEE WHERE EMPLOYEENAME LIKE @EMPLOYEENAME +'%')
BEGIN
SELECT * FROM EMPLOYEE WHERE EMPLOYEENAME LIKE @EMPLOYEENAME+'%';
END
ELSE
BEGIN
PRINT 'LOGIN FAILED'
END
END TRY
BEGIN CATCH
    -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END
EXEC GET_NAME 'R';

CREATE OR ALTER PROCEDURE GET_SAME_NAME
@EMPLOYEENAME VARCHAR(100)
AS
BEGIN
BEGIN TRY 
IF EXISTS (SELECT 1 FROM EMPLOYEE WHERE EMPLOYEENAME=@EMPLOYEENAME)
BEGIN
SELECT count(*) FROM EMPLOYEE WHERE EMPLOYEENAME=@EMPLOYEENAME;
END
ELSE
BEGIN
PRINT 'FAILED TO PROCESS'
END
END TRY
BEGIN CATCH
    -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(), 
               @ErrorSeverity = ERROR_SEVERITY(),
               @ErrorState = ERROR_STATE();

        PRINT 'Error: ' + @ErrorMessage;
    END CATCH
END
EXEC GET_SAME_NAME 'RAM';